name: Vercel Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

permissions:
  contents: read
  deployments: write

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.tests.outcome }}
      security_passed: ${{ steps.security.outcome }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.15.0'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        id: tests
        run: pnpm test
        continue-on-error: true

      - name: Run security scan
        id: security
        run: |
          pnpm audit --production --audit-level=high || true
        continue-on-error: true

      - name: Check quality gates
        run: |
          if [ "${{ steps.tests.outcome }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          echo "✅ All quality gates passed"

  deploy-production:
    name: Deploy to Vercel Production
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.tests_passed == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

      - name: Create GitHub Deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              description: 'Vercel Production Deployment',
              production_environment: true
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.deployment_url }}',
              description: 'Deployment successful'
            });

      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Deployed to Production\n\n✅ **URL**: ${{ steps.deploy.outputs.deployment_url }}\n\n_Deployment completed at ${new Date().toISOString()}_`
            });

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against ${{ steps.deploy.outputs.deployment_url }}"
          npx wait-on ${{ steps.deploy.outputs.deployment_url }} --timeout 60000
          curl -f ${{ steps.deploy.outputs.deployment_url }} || exit 1

      - name: Notify Sentry of deployment
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          npx @sentry/cli releases deploys ${{ github.sha }} new \
            --env production \
            --url ${{ steps.deploy.outputs.deployment_url }}
        continue-on-error: true
