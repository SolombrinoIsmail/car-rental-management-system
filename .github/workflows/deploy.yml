name: Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  check-secrets:
    name: Check Required Secrets
    runs-on: ubuntu-latest
    outputs:
      has-vercel: ${{ steps.check.outputs.has-vercel }}
    steps:
      - id: check
        run: |
          if [[ -n "${{ secrets.VERCEL_TOKEN }}" && -n "${{ secrets.VERCEL_ORG_ID }}" && -n "${{ secrets.VERCEL_PROJECT_ID }}" ]]; then
            echo "has-vercel=true" >> $GITHUB_OUTPUT
          else
            echo "has-vercel=false" >> $GITHUB_OUTPUT
            echo "::warning::Vercel deployment skipped - missing VERCEL_TOKEN, VERCEL_ORG_ID, or VERCEL_PROJECT_ID secrets"
          fi

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: check-secrets
    if: needs.check-secrets.outputs.has-vercel == 'true'
    timeout-minutes: 15
    permissions:
      deployments: write
      contents: read
      pull-requests: write
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.15.0'
          run_install: false

      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event.inputs.environment || 'production' }}

      - name: Build Project Artifacts
        run: vercel build --prod

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            url=$(vercel deploy --prebuilt)
          else
            url=$(vercel deploy --prebuilt --prod)
          fi
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against ${{ steps.deploy.outputs.url }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.url }}")
          if [ "$response" -eq 200 ]; then
            echo "✅ Smoke test passed"
          else
            echo "❌ Smoke test failed with status code: $response"
            exit 1
          fi

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || 'production' }}',
              production_environment: '${{ github.event.inputs.environment || 'production' }}' === 'production',
              auto_merge: false,
              required_contexts: [],
              description: 'Vercel deployment'
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment successful'
            });

      - name: Notify deployment status
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const message = `${status} Deployment to ${{ github.event.inputs.environment || 'production' }} ${status === '✅' ? 'succeeded' : 'failed'}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

      - name: Invalidate CDN cache
        if: success()
        run: |
          echo "Invalidating CDN cache..."
          # Add CDN cache invalidation logic here if needed
