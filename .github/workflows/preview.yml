name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  check-secrets:
    name: Check Required Secrets
    runs-on: ubuntu-latest
    outputs:
      has-vercel: ${{ steps.check.outputs.has-vercel }}
    steps:
      - id: check
        run: |
          if [[ -n "${{ secrets.VERCEL_TOKEN }}" && -n "${{ secrets.VERCEL_ORG_ID }}" && -n "${{ secrets.VERCEL_PROJECT_ID }}" ]]; then
            echo "has-vercel=true" >> $GITHUB_OUTPUT
          else
            echo "has-vercel=false" >> $GITHUB_OUTPUT
            echo "::warning::Vercel preview deployment skipped - missing VERCEL_TOKEN, VERCEL_ORG_ID, or VERCEL_PROJECT_ID secrets"
          fi

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: check-secrets
    if: needs.check-secrets.outputs.has-vercel == 'true'
    timeout-minutes: 15
    permissions:
      deployments: write
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.15.0'
          run_install: false

      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Preview to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Preview deployed to: $url"

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              environment: 'preview',
              transient_environment: true,
              auto_merge: false,
              required_contexts: [],
              description: `Preview for PR #${context.payload.pull_request.number}`
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Preview deployment ready'
            });

            return deployment.data.id;

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            const prNumber = context.payload.pull_request.number;

            const comment = `## ðŸš€ Preview Deployment Ready!

            Your preview is live at: ${url}

            ### Preview Details:
            - **Environment:** Preview
            - **Branch:** \`${context.payload.pull_request.head.ref}\`
            - **Commit:** \`${context.payload.pull_request.head.sha.substring(0, 7)}\`
            - **Deployed at:** ${new Date().toISOString()}

            ### Automated Checks:
            - âœ… Build successful
            - âœ… Preview deployed
            - ðŸ”„ Lighthouse performance check pending

            ---
            *This preview will be automatically updated with each new commit to this PR.*`;

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployment Ready')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

      - name: Run Lighthouse CI
        if: success()
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: ${{ steps.deploy.outputs.url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
