"use client";\n\nimport * as React from "react";\nimport { cn } from "@/lib/utils";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n  header?: React.ReactNode;\n  sidebar?: React.ReactNode;\n  footer?: React.ReactNode;\n  className?: string;\n  sidebarCollapsed?: boolean;\n  fullWidth?: boolean;\n}\n\n/**\n * Main layout component providing consistent structure\n */\nexport function MainLayout({\n  children,\n  header,\n  sidebar,\n  footer,\n  className,\n  sidebarCollapsed = false,\n  fullWidth = false,\n}: MainLayoutProps) {\n  return (\n    <div className={cn("min-h-screen bg-background flex flex-col", className)}>\n      {/* Header */}\n      {header && (\n        <div className="flex-shrink-0">\n          {header}\n        </div>\n      )}\n\n      {/* Main Content Area */}\n      <div className="flex flex-1 overflow-hidden">\n        {/* Sidebar */}\n        {sidebar && (\n          <aside\n            className={cn(\n              "flex-shrink-0 border-r bg-muted/40 transition-all duration-300",\n              sidebarCollapsed ? "w-16" : "w-64",\n              "hidden lg:block"\n            )}\n          >\n            {sidebar}\n          </aside>\n        )}\n\n        {/* Main Content */}\n        <main className="flex-1 overflow-auto">\n          <div className={cn(\n            "h-full",\n            !fullWidth && "container py-6"\n          )}>\n            {children}\n          </div>\n        </main>\n      </div>\n\n      {/* Footer */}\n      {footer && (\n        <div className="flex-shrink-0 border-t">\n          {footer}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Page container for consistent spacing and max-width\n */\ninterface PageContainerProps {\n  children: React.ReactNode;\n  title?: string;\n  description?: string;\n  actions?: React.ReactNode;\n  breadcrumb?: React.ReactNode;\n  className?: string;\n  maxWidth?: "sm" | "md" | "lg" | "xl" | "2xl" | "full";\n}\n\nexport function PageContainer({\n  children,\n  title,\n  description,\n  actions,\n  breadcrumb,\n  className,\n  maxWidth = "full",\n}: PageContainerProps) {\n  const maxWidthClasses = {\n    sm: "max-w-sm",\n    md: "max-w-md", \n    lg: "max-w-lg",\n    xl: "max-w-xl",\n    "2xl": "max-w-2xl",\n    full: "max-w-none",\n  };\n\n  return (\n    <div className={cn("space-y-6", maxWidthClasses[maxWidth], className)}>\n      {/* Page Header */}\n      {(title || description || actions || breadcrumb) && (\n        <div className="space-y-4">\n          {breadcrumb}\n          \n          <div className="flex items-center justify-between">\n            <div className="space-y-1">\n              {title && (\n                <h1 className="text-2xl font-bold tracking-tight">{title}</h1>\n              )}\n              {description && (\n                <p className="text-muted-foreground">{description}</p>\n              )}\n            </div>\n            {actions && (\n              <div className="flex items-center space-x-2">\n                {actions}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Page Content */}\n      {children}\n    </div>\n  );\n}\n\n/**\n * Grid layout for cards and content\n */\ninterface GridLayoutProps {\n  children: React.ReactNode;\n  cols?: 1 | 2 | 3 | 4 | 5 | 6;\n  gap?: number;\n  className?: string;\n}\n\nexport function GridLayout({ \n  children, \n  cols = 3, \n  gap = 6, \n  className \n}: GridLayoutProps) {\n  const colsClasses = {\n    1: "grid-cols-1",\n    2: "grid-cols-1 md:grid-cols-2",\n    3: "grid-cols-1 md:grid-cols-2 lg:grid-cols-3",\n    4: "grid-cols-1 md:grid-cols-2 lg:grid-cols-4",\n    5: "grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5",\n    6: "grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6",\n  };\n\n  const gapClass = `gap-${gap}`;\n\n  return (\n    <div className={cn(\n      "grid",\n      colsClasses[cols],\n      gapClass,\n      className\n    )}>\n      {children}\n    </div>\n  );\n}\n\n/**\n * Responsive stack layout\n */\ninterface StackLayoutProps {\n  children: React.ReactNode;\n  direction?: "vertical" | "horizontal" | "responsive";\n  spacing?: number;\n  align?: "start" | "center" | "end" | "stretch";\n  justify?: "start" | "center" | "end" | "between" | "around";\n  className?: string;\n}\n\nexport function StackLayout({\n  children,\n  direction = "vertical",\n  spacing = 4,\n  align = "start",\n  justify = "start",\n  className,\n}: StackLayoutProps) {\n  const directionClasses = {\n    vertical: "flex flex-col",\n    horizontal: "flex flex-row",\n    responsive: "flex flex-col md:flex-row",\n  };\n\n  const alignClasses = {\n    start: "items-start",\n    center: "items-center", \n    end: "items-end",\n    stretch: "items-stretch",\n  };\n\n  const justifyClasses = {\n    start: "justify-start",\n    center: "justify-center",\n    end: "justify-end", \n    between: "justify-between",\n    around: "justify-around",\n  };\n\n  const spacingClass = direction === "vertical" \n    ? `space-y-${spacing}` \n    : `space-x-${spacing}`;\n\n  return (\n    <div className={cn(\n      directionClasses[direction],\n      alignClasses[align],\n      justifyClasses[justify],\n      direction === "responsive" ? `space-y-${spacing} md:space-y-0 md:space-x-${spacing}` : spacingClass,\n      className\n    )}>\n      {children}\n    </div>\n  );\n}\n\n/**\n * Section divider component\n */\ninterface SectionDividerProps {\n  label?: string;\n  className?: string;\n}\n\nexport function SectionDivider({ label, className }: SectionDividerProps) {\n  return (\n    <div className={cn("relative", className)}>\n      <div className="absolute inset-0 flex items-center">\n        <span className="w-full border-t" />\n      </div>\n      {label && (\n        <div className="relative flex justify-center text-xs uppercase">\n          <span className="bg-background px-2 text-muted-foreground">\n            {label}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}